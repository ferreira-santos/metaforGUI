{
    "collab_server" : "",
    "contents" : "#' metaforGUI: Graphical User Interface (GUI) for the R metafor Package\n#' @description\n#' Cross-platform GUI for the R metafor[1] package, based on gWidgets and RGtk2. Allows conducting a basic meta-analysis. Suitable for beginners not familiar with R, but does not allow using advanced features of metafor.\n#' @seealso\n#' \\code{\\link[metafor]{metafor-package}} for full details of the 'metafor' package.\n#' @examples\n#' ## Simply run the main function to bring up the GUI.\n#' metaforGUI()\n#' ## Loading data set, selecting variables and running analysis are run from the GUI.\n#' ## Please refer to addtional documentation for details: https://github.com/ferreira-santos/metaforGUI\n#' @references\n#' [1] Viechtbauer, W. (2010). Conducting meta-analyses in R with the metafor package. Journal of Statistical Software, 36(3), 1-48. URL: http://www.jstatsoft.org/v36/i03/\n#' @import gWidgets\n#' @import gWidgetsRGtk2\n#' @import RGtk2\n#' @import cairoDevice\n#' @import metafor\n#' @import grDevices\n#' @import utils\n#' @export\n\nmetaforGUI <- function(csv.dec = Sys.localeconv()[\"decimal_point\"], csv.sep = \",\"){       # For toolkit option, replace \"){\" --> gui.tk = \"RGtk2\"){\n  #CITATION: citation(\"metaforGUI\")\n\n  if(csv.dec==\",\") { csv.sep <- \";\" }\n\n  #Option to change the guiToolkit (under development)\n  # if (gui.tk==\"RGtk2\" | gui.tk==\"tcltk\") { options(guiToolkit = gui.tk)\n  # } else { options(guiToolkit = \"RGtk2\") } #Define default here, and in the function call\n  options(guiToolkit = \"RGtk2\")\n\n  #Get Screen size (pixels)\n  sw <- as.numeric(system(\"wmic desktopmonitor get screenwidth\", intern=TRUE)[-c(1, length(system(\"wmic desktopmonitor get screenwidth\", intern=TRUE)))])\n  sh <- as.numeric(system(\"wmic desktopmonitor get screenheight\", intern=TRUE)[-c(1, length(system(\"wmic desktopmonitor get screenheight\", intern=TRUE)))])\n  #print(c(\"Screen Size:\",as.character(sw), as.character(sh)))\n  start_width <- sw/2\n  start_height <- sh/2\n  rm(sh, sw)\n\n  win_main = gwindow(paste0(\"metaforGUI (version \",packageDescription(\"metaforGUI\")$Version,\"; FFS)\"), width=start_width, height=start_height)\n  rm(start_width, start_height)\n  # lay = glayout(container=win) # lay = layout organizer\n  win <- ggroup(horizontal=T, container=win_main, expand=T)\n\n  ## GUI: LEFT FRAME ####\n  g <- gframe(\"Define:\", horizontal=F, container=win, expand=T)\n\n  ## LF Top: Load Dataset ####\n  g_top <- ggroup(container=g)\n  glabel(\"  DataSet file:\", container=g_top)\n  editFile <- gedit(text=\"<no file>\", container=g_top)\n  gbutton(\"Load file\", container=g_top, handler=\n            function(h,...) {\n              # load Dataset file\n              tag(win, \"f\") <- choose.files(caption=\"Select DataSet file in Comma-Separated Value (CSV) format\", multi=F,\n                                            filters=matrix(c(\"CSV files (*.csv)\",\"All files (*.*)\",\"*.csv\",\"*.*\"), ncol=2), index=1)\n              if(length(tag(win, \"f\"))>0) {\n                svalue(editFile) <- tag(win, \"f\")\n                # read according to locale (read.csv or read.csv2)\n                tryCatch(\n                  tag(win,\"dataset\") <<- read.csv(tag(win, \"f\"), dec=csv.dec, sep=csv.sep),\n                  error = function(e) {\n                    gmessage(icon=\"error\", paste0(\"An error occurred while trying to load the CSV dataset file. CSV files may differ depending on regional/locale settings: if the decimal mark is a dot ( . ) then CSV files use commas ( , ) to separate values, but if the decimal mark is a comma ( , ) then CSV files use semicolons ( ; ) to separate values.\\n\\nmetaforGUI attempted to determine these values automatically and considered:\\ndecimal mark = \",csv.dec,\"\\nseparator = \",csv.sep,\"\\n\\nYou may open your CSV file in a text editor to check what is the actual decimal mark and separator being used in that file. Then you may define these values manually by restarting metaforGUI defining the function arguments csv.dec and csv.sep, for example by typing:\\nmetaforGUI(csv.dec=\\\",\\\", csv.sep=\\\";\\\")\\n\\nPlease see package documentation for further details.\\n\\nFor reference and bug reporting, the R error message was the following:\\n\\\"\",e$message,\"\\\"\"), title=\"Error loading file\")\n                    cat(paste0(\"\\n*metaforGUI* message:\\n    An error occurred while trying to load the CSV dataset file. CSV files may differ depending on regional/locale settings: if the decimal mark is a dot ( . ) then CSV files use commas ( , ) to separate values, but if the decimal mark is a comma ( , ) then CSV files use semicolons ( ; ) to separate values.\\n\\n    metaforGUI attempted to determine these values automatically and considered:\\n    decimal mark = \",csv.dec,\"\\n    separator = \",csv.sep,\"\\n\\n    You may open your CSV file in a text editor to check what is the actual decimal mark and separator being used in that file. Then you may define these values manually by restarting metaforGUI defining the function arguments csv.dec and csv.sep, for example by typing:\\n      metaforGUI(csv.dec=\\\",\\\", csv.sep=\\\";\\\")\\n\\n    Please see package documentation for further details.\\n\\n    For reference and bug reporting, the R error message was the following:\\n    \\\"\",e$message,\"\\\"\\n\\n\"))\n                  }\n                )\n                try(assign(\"dataset\", tag(win,\"dataset\"), envir=.GlobalEnv), silent=T)\n              }\n            })#End-of-btnLoadFile-function\n\n  gseparator(container=g)\n\n  ## LF Mid: VarBrowser & Var Selection ####\n  g_mid <- ggroup(container=g, expand=T)\n  g_mid_left <- ggroup(container=g_mid)\n\n  varbrowser <- gvarbrowser(container=g_mid_left)\n\n  g_mid_right <- ggroup(container=g_mid, horizontal=F)\n  addSpring(g_mid_right)\n\n  frameStudies <- gframe(\"Study names (optional):\", container=g_mid_right, expand=T)\n  glabel(\" \", container=frameStudies)\n  btnAddStudies <- gbutton(\">>\", container=frameStudies, handler=\n                             function(h,...) {\n                               if(svalue(varbrowser)==\"\") { gmessage(\"<No variable selected> from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n                               else if(svalue(btnAddStudies)==\">>\") {\n                                 svalue(labelStudies) <- svalue(varbrowser)\n                                 svalue(btnAddStudies) <- \"<<\"}\n                               else {\n                                 svalue(labelStudies) <- \"<No variable selected>\"\n                                 svalue(btnAddStudies) <- \">>\"}\n                             })\n  labelStudies <- glabel(\"<No variable selected>\", container=frameStudies)\n  glabel(\"  \", container=frameStudies)\n  addSpring(g_mid_right)\n\n  frameES <- gframe(\"Effect Sizes (ES):\", container=g_mid_right, expand=T)\n  glabel(\" \", container=frameES)\n  btnAddES <- gbutton(\">>\", container=frameES, handler=\n                        function(h,...) {\n                          if(svalue(varbrowser)==\"\") { gmessage(\"<No variable selected> from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n                          else if(svalue(btnAddES)==\">>\") {\n                            svalue(labelES) <- svalue(varbrowser)\n                            svalue(btnAddES) <- \"<<\"}\n                          else {\n                            svalue(labelES) <- \"<No variable selected>\"\n                            svalue(btnAddES) <- \">>\"}\n                        })\n  labelES <- glabel(\"<No variable selected>\", container=frameES)\n  glabel(\"  \", container=frameES)\n  addSpring(g_mid_right)\n\n  frameVar <- gframe(\"ES Variances/SE:\", container=g_mid_right, expand=T)\n  glabel(\" \", container=frameVar)\n  btnAddVar <- gbutton(\">>\", container=frameVar, handler=\n                         function(h,...) {\n                           if(svalue(varbrowser)==\"\") { gmessage(\"<No variable selected> from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n                           else if(svalue(btnAddVar)==\">>\") {\n                             svalue(labelVar) <- svalue(varbrowser)\n                             svalue(btnAddVar) <- \"<<\"}\n                           else {\n                             svalue(labelVar) <- \"<No variable selected>\"\n                             svalue(btnAddVar) <- \">>\"}\n                         })\n  labelVar <- glabel(\"<No variable selected>\", container=frameVar)\n  glabel(\"  \", container=frameVar)\n  radioVar <- gradio(items=c(\"Variances\",\"Standard Errors (SE)\"), container=frameVar)\n  glabel(\"  \", container=frameVar)\n  addSpring(g_mid_right)\n\n  #    frameN <- gframe(\"Sample Size (N):\", container=g_mid_right, expand=T)\n  #      glabel(\" \", container=frameN)\n  #      btnAddN <- gbutton(\">>\", container=frameN, handler=\n  #        function(h,...) {\n  #          if(svalue(varbrowser)==\"\") { gmessage(\"<No variable selected> from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n  #          else if(svalue(btnAddN)==\">>\") {\n  #            svalue(labelN) <- svalue(varbrowser)\n  #            svalue(btnAddN) <- \"<<\"}\n  #          else {\n  #            svalue(labelN) <- \"<No variable selected>\"\n  #            svalue(btnAddN) <- \">>\"}\n  #        })\n  #      labelN <- glabel(\"<No variable selected>\", container=frameN)\n  #      glabel(\"  \", container=frameN)\n  #    addSpring(g_mid_right)\n\n  gseparator(container=g)\n\n  ## LF Bottom: Output Folder ####\n  g_bottom <- ggroup(container=g)\n  glabel(\"  Output Folder/Directory (WD):\", container=g_bottom)\n  editWD <- gedit(getwd(), container=g_bottom)\n  gbutton(\"Change Folder\", container=g_bottom, handler=\n            function(h,...) {\n              d <- choose.dir(getwd(), caption = \"Select Output Folder\")\n              if(!is.na(d)) {\n                setwd(d)\n                svalue(editWD) <- getwd()\n              }\n            })\n\n  ## GUI: RIGHT FRAME ####\n  g2 <- ggroup(horizontal=F, container=win, expand=T)\n  g2frame <- gframe(\"Define and Run:\", container=g2, horizontal=F, expand=T)\n  glabel(\"Options\", container=g2frame) #ISSUE: IDEA: serves as header and clicking brings back defaults!\n  radioFixedRandom <- gradio(items=c(\"Fixed Effects\",\"Random Effects\"), selected=2, container=g2frame) #ISSUE: consider changing to dropbox with all possible methods\n  glabel(\"Outputs\", container=g2frame) #ISSUE: IDEA: serves as header and clicking brings back defaults!\n  outputMA <- gcheckbox(\"Meta-Analysis Results\", checked=T, container=g2frame, handler=\n                          function(h,...) {\n                            if(svalue(outputMA)==F) {\n                              gmessage(\"The Meta-Analysis Results output cannot be disabled as metaforGUI will always produce an output text file (with extension .txt).\\n\\nThis option is only listed here as a reminder.\\n\\nNote: the output files will be overwritten everytime you run metaforGUI, so copy or move the files to save them.\", title=\"This option cannot be unchecked.\")\n                              cat(\"\\n*metaforGUI* message:\\n    The Meta-Analysis Results output cannot be disabled as metaforGUI will always produce an output text file (with extension .txt).\\n    This option is only listed here as a reminder.\\n    Note: the output files will be overwritten everytime you run metaforGUI, so copy or move the files to save them.\\n\\n\")\n                            }\n                            svalue(outputMA) <- T\n                          })\n  outputForest <- gcheckbox(\"Forest Plot (PDF)\", checked=T, container=g2frame)\n  outputFunnel <- gcheckbox(\"Funnel Plot (PDF)\", checked=T, container=g2frame)\n  outputMAobjData <- gcheckbox(\"Save Output as RData file\", checked=T, container=g2frame)\n\n  gbutton(\"Run Meta-Analysis\", container=g2frame, handler=\n            function(h,...) {\n              #ISSUE: IDEA: if files already exist, confirmation dialog asking if user wants to overwrite\n\n              ## Check for btnAddES and btnAddVar if ES and Var variables are defined:\n              if(svalue(btnAddES)!=\"<<\" || svalue(btnAddVar)!=\"<<\"){\n                #ES and Var variables not assigned\n                gmessage(icon=\"error\", \"Effect Sizes (ES) or ES Variances/SEs not defined. Please select the variables from the variable list.\",title=\"Error: Required variables not defined.\")\n              } else {\n                #ES and Var variables assigned -> Continue!\n\n                ## Define rma arguments ##########################\n                # arg_slab = Study Labels (optional)\n                if(svalue(btnAddStudies)==\"<<\") {\n                  if (length(strsplit(as.character(svalue(labelStudies)), \"\\\\$\")[[1]])==1)\n                  { tag(win,\"arg_slab\") <- get(svalue(labelStudies)) }\n                  else\n                  { tag(win,\"arg_slab\") <- with(get(strsplit(as.character(svalue(labelStudies)), \"\\\\$\")[[1]][1]), get(strsplit(as.character(svalue(labelStudies)), \"\\\\$\")[[1]][2])) }\n                }\n\n                # arg_yi = Effect Sizes (ES)\n                if (length(strsplit(as.character(svalue(labelES)), \"\\\\$\")[[1]])==1) {\n                  tag(win, \"arg_yi\") <- get(svalue(labelES))\n                }\n                else {\n                  tag(win,\"arg_yi\") <- with(get(strsplit(as.character(svalue(labelES)), \"\\\\$\")[[1]][1]), get(strsplit(as.character(svalue(labelES)), \"\\\\$\")[[1]][2]))\n                }\n\n                # arg_vi OR arg_sei = ES Variances OR ES Standard Errors\n                if (length(strsplit(as.character(svalue(labelVar)), \"\\\\$\")[[1]])==1) {\n                  if(svalue(radioVar)==\"Variances\") {\n                    tag(win,\"arg_vi\")<-get(svalue(labelVar)); tag(win,\"arg_sei\")<-NULL }\n                  else {\n                    tag(win,\"arg_vi\")<-NULL; tag(win,\"arg_sei\")<-get(svalue(labelVar)) }\n                }\n                else {\n                  if(svalue(radioVar)==\"Variances\") {\n                    tag(win,\"arg_vi\")<-with(get(strsplit(as.character(svalue(labelVar)), \"\\\\$\")[[1]][1]), get(strsplit(as.character(svalue(labelVar)), \"\\\\$\")[[1]][2])); tag(win,\"arg_sei\")<-NULL\n                  }\n                  else {\n                    tag(win,\"arg_vi\")<-NULL; tag(win,\"arg_sei\")<-with(get(strsplit(as.character(svalue(labelVar)), \"\\\\$\")[[1]][1]), get(strsplit(as.character(svalue(labelVar)), \"\\\\$\")[[1]][2]))\n                  }\n                }\n\n                # arg_method = Meta-analytic method\n                if(svalue(radioFixedRandom)==\"Fixed Effects\") { tag(win,\"arg_method\") <- \"FE\"} else {tag(win,\"arg_method\") <- \"REML\" }\n\n                ## Run rma ##########################\n                if(length(tag(win,\"arg_yi\"))<3 || (length(tag(win,\"arg_yi\"))!=length(tag(win,\"arg_vi\")) && length(tag(win,\"arg_yi\"))!=length(tag(win,\"arg_sei\")))) {\n                  gmessage(icon=\"error\", paste(\"One of the following problems was detected with the data entered.\\n\\n1) Meta-analysis cannot be computed with less than 3 effect sizes/studies (the current dataset only contains\", length(tag(win,\"arg_yi\")),\"data points).\\n\\n2) The number of effect sizes, variances/SEs, and/or study labels do not match. Please ensure that all variables have the same number of data points.\\n\\nOutputs will not be produced.\"), title=\"Error: Problems found with the data.\")\n                  cat(paste(\"\\n*metaforGUI* message:\\n    One of the following problems was detected with the data entered.\\n      1) Meta-analysis cannot be computed with less than 3 effect sizes/studies (the current dataset only contains\", length(tag(win,\"arg_yi\")),\"data points).\\n      2) The number of effect sizes, variances/SEs, and/or study labels do not match. Please ensure that all variables have the same number of data points.\\n    Outputs will not be produced.\\n\\n\"))\n                } else if(svalue(btnAddStudies)==\"<<\" && (length(tag(win,\"arg_yi\"))!=length(tag(win,\"arg_slab\")))) {\n                  gmessage(icon=\"error\", paste(\"One of the following problems was detected with the data entered.\\n\\n1) Meta-analysis cannot be computed with less than 3 effect sizes/studies (the current dataset only contains\", length(tag(win,\"arg_yi\")),\"data points).\\n\\n2) The number of effect sizes, variances/SEs, and/or study labels do not match. Please ensure that all variables have the same number of data points.\\n\\nOutputs will not be produced.\"), title=\"Error: Problems found with the data.\")\n                  cat(paste(\"\\n*metaforGUI* message:\\n    One of the following problems was detected with the data entered.\\n      1) Meta-analysis cannot be computed with less than 3 effect sizes/studies (the current dataset only contains\", length(tag(win,\"arg_yi\")),\"data points).\\n      2) The number of effect sizes, variances/SEs, and/or study labels do not match. Please ensure that all variables have the same number of data points.\\n    Outputs will not be produced.\\n\\n\"))\n                } else {\n\n                  if(svalue(btnAddStudies)==\"<<\") {\n                    #Run WITH custom Study Names\n                    tag(win,\"meta_analysis\") <- rma(yi=tag(win,\"arg_yi\"), vi=tag(win,\"arg_vi\"), sei=tag(win,\"arg_sei\"), method=tag(win,\"arg_method\"), slab=tag(win,\"arg_slab\"))\n                  } else {\n                    #Run WITHOUT custom Study Names\n                    tag(win,\"meta_analysis\") <- rma(yi=tag(win,\"arg_yi\"), vi=tag(win,\"arg_vi\"), sei=tag(win,\"arg_sei\"), method=tag(win,\"arg_method\")) }\n\n                  ## Save outputs ##########################\n                  cat(\"********** [metaforGUI] Output ***********\\n\", \"Output automatically generated by metaforGUI \",\n                      as.character(packageVersion(\"metaforGUI\")), \" on \", as.character(Sys.time()),\".\\n\\n\",\n                      \"List of sections:\\n\",\n                      \"  1) Function code used\\n\",\n                      \"  2) Meta-analysis results\\n\",\n                      \"  3) Meta-analysis publication bias check (Egger's test)\\n\",\n                      \"  4) Additional output files\\n\",\n                      \"  5) Version and citation details\\n\\n\",\n                      sep=\"\", file=\"metaforGUI_Output.txt\")\n\n                  cat(\"\\n********** 1) Function code used ***********\\n- metafor Function call:\\n    \", file=\"metaforGUI_Output.txt\", append=T)\n                  #capture.output(tag(win,\"meta_analysis\")$call, file=\"metaforGUI_Output.txt\", append=T)  # Actual code used to run rma() -- but gets complex because of tag() function\n                  cat(\"    rma(yi = arg_yi, vi = arg_vi, sei = arg_sei, method = arg_method)\", file=\"metaforGUI_Output.txt\", append=T)\n                  cat(\"\\n- Effect Sizes (ES):\\n    arg_yi =\", tag(win,\"arg_yi\"), file=\"metaforGUI_Output.txt\", append=T)\n                  cat(\"\\n- ES Variances*:\\n    arg_vi =\", tag(win,\"arg_vi\"), file=\"metaforGUI_Output.txt\", append=T)\n                  cat(\"\\n- ES Standard Errors*:\\n    arg_sei =\", tag(win,\"arg_sei\"), file=\"metaforGUI_Output.txt\", append=T)\n                  cat(\"\\n- Meta-analysis estimation method:\\n    arg_method =\", tag(win,\"arg_method\"), file=\"metaforGUI_Output.txt\", append=T)\n                  cat(\"\\n\\n*(Only one of arg_vi or arg_sei should contain data).\\n\", file=\"metaforGUI_Output.txt\", append=T)\n\n                  cat(\"\\n\\n********** 2) Meta-analysis results ***********\", file=\"metaforGUI_Output.txt\", append=T)\n                  capture.output(summary(tag(win,\"meta_analysis\")), file=\"metaforGUI_Output.txt\", append=T)  #Summary of results\n\n                  cat(\"\\n********** 3) Meta-analysis publication bias check ***********\", file=\"metaforGUI_Output.txt\", append=T)\n                  capture.output(regtest(tag(win,\"meta_analysis\")), file=\"metaforGUI_Output.txt\", append=T)  #Egger's Regression Test for Funnel Plot Asymmetry\n\n                  cat(\"\\n********** 4) Additional output files ***********\\n\", file=\"metaforGUI_Output.txt\", append=T)\n                  if(svalue(outputForest)==T) {\n                    pdf(\"metaforGUI_Forest.pdf\"); forest(tag(win,\"meta_analysis\")); dev.off()\n                    cat(\"- Forest plot PDF file generated (metaforGUI_Forest.pdf).\\n\", file=\"metaforGUI_Output.txt\", append=T) }\n\n                  if(svalue(outputFunnel)==T) {\n                    pdf(\"metaforGUI_Funnel.pdf\"); funnel(tag(win,\"meta_analysis\")); dev.off()\n                    cat(\"- Funnel plot PDF file generated (metaforGUI_Funnel.pdf).\\n\", file=\"metaforGUI_Output.txt\", append=T) }\n\n                  if(svalue(outputMAobjData)==T) {\n                    meta_analysis <- tag(win,\"meta_analysis\")\n                    save(meta_analysis, file=\"metaforGUI_MetaAnalysis.RData\")\n                    cat(\"- Meta-analysis results data file generated (metaforGUI_MetaAnalysis.RData). Use load() function to load the data into R.\\n\", file=\"metaforGUI_Output.txt\", append=T) }\n\n                  cat(\"\\n\\n********** 5) Version and citation details ***********\\nWhen using metaforGUI you should cite:\\n\\n- \",\n                      R.version.string, \":\\n\", sep=\"\", file=\"metaforGUI_Output.txt\", append=T)\n                  capture.output(print(citation(), style=\"textVersion\"), file=\"metaforGUI_Output.txt\", append=T)\n\n                  cat(\"\\n\", paste(\"- metafor package version\", packageVersion(\"metafor\")),\" (http://www.metafor-project.org/):\\n\", sep=\"\", file=\"metaforGUI_Output.txt\", append=T)\n                  capture.output(print(citation(\"metafor\"), style=\"textVersion\"), file=\"metaforGUI_Output.txt\", append=T)\n\n                  cat(\"\\n\", paste(\"- metaforGUI package version\", packageVersion(\"metaforGUI\")), \":\\n\", sep=\"\", file=\"metaforGUI_Output.txt\", append=T)\n                  capture.output(print(citation(\"metaforGUI\"), style=\"textVersion\"), file=\"metaforGUI_Output.txt\", append=T)\n\n                  cat(\"\\n\\n********** [metaforGUI] End of Output ***********\", file=\"metaforGUI_Output.txt\", append=T)\n\n\n                  gmessage(paste(\"Meta-analysis appears to have run successfully!\\n\\nPlease find the output file(s) in the defined output directory:\\n\",getwd()), title=\"Meta-analysis successful\")\n                  cat(\"\\n*metaforGUI* message:\\n    Meta-analysis appears to have run successfully!\\n    Please find the output file(s) in the defined output directory:\\n     \", getwd() ,\"\\n\\n\")\n\n                } #End-of-check if there are at least 3 data-points\n              } #End-of-check if ES and Var variables are assigned-If_clause\n            }) #End-of-btnRunMA_handler_function\n  addSpring(g2frame)\n\n  aboutText <- gtext(\"Copyright 2017 Fernando Ferreira-Santos\\nFor details and documentation please visit the website \",\n                     height=300, container=g2frame)\n  insert(aboutText,\"https://github.com/ferreira-santos/metaforGUI\", font.attr=c(style=\"italic\"), do.newline=F)\n  enabled(aboutText) <- F\n  aboutButton <- gbutton(\"Visit website\",container=g2frame, handler=\n                           function(h,...) {browseURL(\"https://github.com/ferreira-santos/metaforGUI#metaforgui\")})\n\n\n} #End-of-metaforGUI-function / EOF\n",
    "created" : 1490230938939.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1444719510",
    "id" : "66C82BFD",
    "lastKnownWriteTime" : 1490231495,
    "last_content_update" : 1490231495250,
    "path" : "C:/Users/F. Ferreira-Santos/Dropbox/GitHub/metaforGUI/R/metaforGUI.R",
    "project_path" : "R/metaforGUI.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}