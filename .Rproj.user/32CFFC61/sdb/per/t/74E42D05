{
    "collab_server" : "",
    "contents" : "#' metaforGUI: Graphical User Interface (GUI) for the R metafor Package\n#' @description\n#' Cross-platform GUI for the R metafor[1] package, based on gWidgets and RGtk2. Allows conducting a basic meta-analysis. Suitable for beginners not familiar with R, but does not allow using advanced features of metafor.\n#' @seealso\n#' \\code{\\link[metafor]{metafor-package}} for full details of the 'metafor' package.\n#' @examples\n#' ## Simply run the main function to bring up the GUI.\n#' metaforGUI()\n#' ## Loading data set, selecting variables and running analysis are run from the GUI.\n#' ## Please refer to addtional documentation for details.\n#' @references\n#' [1] Viechtbauer, W. (2010). Conducting meta-analyses in R with the metafor package. Journal of Statistical Software, 36(3), 1-48. URL: http://www.jstatsoft.org/v36/i03/\n#' @import gWidgets\n#' @import gWidgetsRGtk2\n#' @import metafor\n#' @import grDevices\n#' @import utils\n#' @export\n\nmetaforGUI <- function(){\n\noptions(guiToolkit = \"RGtk2\")\n\n#Get Screen size (pixels)\nsw <- as.numeric(system(\"wmic desktopmonitor get screenwidth\" , intern=TRUE))[-c(1, length(as.numeric(system(\"wmic desktopmonitor get screenwidth\" , intern=TRUE))))][2]\nsh <- as.numeric(system(\"wmic desktopmonitor get screenheight\", intern=TRUE))[-c(1, length(as.numeric(system(\"wmic desktopmonitor get screenheight\", intern=TRUE))))][2]\n  #print(c(\"Screen Size:\",as.character(sw), as.character(sh)))\nstart_width <- sw/2\nstart_height <- sh/2\nrm(sh, sw)\n\nwin = gwindow(\"metaforGUI (version-here; FFS)\", width=start_width, height=start_height)\nrm(start_width, start_height)\n#lay = glayout(container=win) # lay = layout organizer\ng <- gframe(\"Define:\", horizontal=F, container=win, expand=T)\ng_top <- ggroup(container=g)\n  glabel(\"  DataSet file:\", container=g_top)\n  editFile <- gedit(text=\"<no file>\", container=g_top)\n  gbutton(\"Load file\", container=g_top, handler=\n    function(h,...) {\n    # load file according to locale (read.csv or read.csv2) using --> gfile()\n    if(Sys.localeconv()[\"decimal_point\"]==\".\") { #use read.csv\n      read.csv(\n        gfile(\n          text=\"Select DataSet file in Comma-Separated Value (CSV) format\",\n          type=\"open\",\n          filter = list(\n          \"CSV files (*.csv)\" = list(patterns = c(\"*.csv\")),\n          \"All files (*.*)\" = list(patterns = c(\"*\"))),\n          handler = function(h,...) { print(\"aaa\")}\n          )\n        )\n    } else { #use read.csv2\n      read.csv2(\n        gfile(\n          text=\"Select DataSet file in Comma-Separated Value (CSV) format\",\n          type=\"open\",\n          filter = list(\n            \"CSV files (*.csv)\" = list(patterns = c(\"*.csv\")),\n            \"All files (*.*)\" = list(patterns = c(\"*\")))\n        )\n      )\n    }\n  })#End-of-btnLoadFile-function\n\n  gseparator(container=g)\n\ng_mid <- ggroup(container=g, expand=T)\n  g_mid_left <- ggroup(container=g_mid)\n    varbrowser <- gvarbrowser(container=g_mid_left)\n  g_mid_right <- ggroup(container=g_mid, horizontal=F)\n    addSpring(g_mid_right)\n\n    frameStudies <- gframe(\"Study names (optional):\", container=g_mid_right, expand=T)\n      glabel(\" \", container=frameStudies)\n      btnAddStudies <- gbutton(\">>\", container=frameStudies, handler=\n        function(h,...) {\n          if(svalue(varbrowser)==\"\") { gmessage(\"No variable selected from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n          else if(svalue(btnAddStudies)==\">>\") {\n            svalue(labelStudies) <- svalue(varbrowser)\n            svalue(btnAddStudies) <- \"<<\"}\n          else {\n            svalue(labelStudies) <- \"No variable selected\"\n            svalue(btnAddStudies) <- \">>\"}\n        })\n      labelStudies <- glabel(\"No variable selected\", container=frameStudies)\n      glabel(\"  \", container=frameStudies)\n    addSpring(g_mid_right)\n\n    frameES <- gframe(\"Effect Sizes (ES):\", container=g_mid_right, expand=T)\n      glabel(\" \", container=frameES)\n      btnAddES <- gbutton(\">>\", container=frameES, handler=\n        function(h,...) {\n          if(svalue(varbrowser)==\"\") { gmessage(\"No variable selected from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n          else if(svalue(btnAddES)==\">>\") {\n            svalue(labelES) <- svalue(varbrowser)\n            svalue(btnAddES) <- \"<<\"}\n          else {\n            svalue(labelES) <- \"No variable selected\"\n            svalue(btnAddES) <- \">>\"}\n        })\n      labelES <- glabel(\"No variable selected\", container=frameES)\n      glabel(\"  \", container=frameES)\n    addSpring(g_mid_right)\n\n    frameVar <- gframe(\"ES Variances/SE:\", container=g_mid_right, expand=T)\n      glabel(\" \", container=frameVar)\n      btnAddVar <- gbutton(\">>\", container=frameVar, handler=\n        function(h,...) {\n          if(svalue(varbrowser)==\"\") { gmessage(\"No variable selected from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n          else if(svalue(btnAddVar)==\">>\") {\n            svalue(labelVar) <- svalue(varbrowser)\n            svalue(btnAddVar) <- \"<<\"}\n          else {\n            svalue(labelVar) <- \"No variable selected\"\n            svalue(btnAddVar) <- \">>\"}\n        })\n      labelVar <- glabel(\"No variable selected\", container=frameVar)\n      glabel(\"  \", container=frameVar)\n      radioVar <- gradio(items=c(\"Variances\",\"Standard Errors (SE)\"), container=frameVar)\n      glabel(\"  \", container=frameVar)\n    addSpring(g_mid_right)\n\n#    frameN <- gframe(\"Sample Size (N):\", container=g_mid_right, expand=T)\n#      glabel(\" \", container=frameN)\n#      btnAddN <- gbutton(\">>\", container=frameN, handler=\n#        function(h,...) {\n#          if(svalue(varbrowser)==\"\") { gmessage(\"No variable selected from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n#          else if(svalue(btnAddN)==\">>\") {\n#            svalue(labelN) <- svalue(varbrowser)\n#            svalue(btnAddN) <- \"<<\"}\n#          else {\n#            svalue(labelN) <- \"No variable selected\"\n#            svalue(btnAddN) <- \">>\"}\n#        })\n#      labelN <- glabel(\"No variable selected\", container=frameN)\n#      glabel(\"  \", container=frameN)\n#    addSpring(g_mid_right)\n\n  gseparator(container=g)\n\ng_bottom <- ggroup(container=g)\n  glabel(\"  Output dir (WD):\", container=g_bottom)\n  editWD <- gedit(getwd(), container=g_bottom)\n  gbutton(\"Change dir\", container=g_bottom, handler=\n    function(h,...) {\n      setwd(gfile(type=\"selectdir\"))\n      svalue(editWD) <- getwd()\n    })\ng2 <- ggroup(horizontal=F, container=win, expand=T)\ng2frame <- gframe(\"Define and Run:\", container=g2, horizontal=F, expand=T)\ngbutton(\"Options\", container=g2frame) #ISSUE: IDEA: serves as header and clicking brings back defaults!\nradioFixedRandom <- gradio(items=c(\"Fixed Effects\",\"Random Effects\"), selected=2, container=g2frame) #ISSUE: consider changing to dropbox with all possible methods\ngbutton(\"Outputs\", container=g2frame) #ISSUE: IDEA: serves as header and clicking brings back defaults!\noutputMA <- gcheckbox(\"Meta-Analysis Results\", checked=T, container=g2frame, handler=\n    function(h,...) {\n      if(svalue(outputMA)==F) {gmessage(\"The Meta-Analysis Results output cannot be disabled as metaforGUI will always produce an output text file (with extension .txt).\\n\\nThis option is only listed here as a reminder.\\n\\nNote: the output files will be overwritten everytime you run metaforGUI, so copy or move the files to save them.\", \"This option cannot be unchecked.\")}\n      svalue(outputMA) <- T\n    })\noutputForest <- gcheckbox(\"Forest Plot (PDF)\", checked=T, container=g2frame)\noutputFunnel <- gcheckbox(\"Funnel Plot (PDF)\", checked=T, container=g2frame)\noutputMAobjData <- gcheckbox(\"Save Output as RData file\", checked=T, container=g2frame)\n\n\naddSpring(g2frame)\ngbutton(\"Run Meta-Analysis\", container=g2frame, handler=\n  function(h,...) {\n  #ISSUE: IDEA: if files already exist, confirmation dialog asking if user wants to overwrite\n\n  ## Check for btnAddES and btnAddVar if ES and Var variables are defined:\n  if(svalue(btnAddES)!=\"<<\" || svalue(btnAddVar)!=\"<<\"){\n    #ES and Var variables not assigned\n    gmessage(\"Effect Sizes (ES) or ES Variances/SEs not defined. Please select the variables from the variable list.\",title=\"Required variables not defined.\")\n  } else {\n    #ES and Var variables assigned -> Continue!\n\n  ## Define rma arguments: ##########################\n  if(svalue(btnAddStudies)==\"<<\") { arg_slab <- get(svalue(labelStudies)) }\n  arg_yi <- get(svalue(labelES))\n  if(svalue(radioVar)==\"Variances\") {arg_vi<-get(svalue(labelVar));arg_sei<-NULL} else {arg_vi<-NULL;arg_sei<-get(svalue(labelVar))}\n  if(svalue(radioFixedRandom)==\"Fixed Effects\") {arg_method <- \"FE\"} else {arg_method <- \"REML\"}\n\n  ## Run rma: ##########################\n  if(svalue(btnAddStudies)==\"<<\") {\n    #Run WITH custom Study Names\n    meta_analysis <- rma(yi=arg_yi, vi=arg_vi, sei=arg_sei, method=arg_method, slab=arg_slab)\n  } else {\n    #Run WITHOUT custom Study Names\n    meta_analysis <- rma(yi=arg_yi, vi=arg_vi, sei=arg_sei, method=arg_method) }\n\n  ## Save outputs: ##########################\n  cat(\"********** [metaforGUI] Output ***********\\n\", \"Output automatically generated by metaforGUI \",\n      as.character(packageVersion(\"metaforGUI\")), \" at \", as.character(Sys.time()),\".\\n\\n\",\n      \"List of sections:\\n\",\n      \"  1) Function code used\\n\",\n      \"  2) Meta-analysis results\\n\",\n      \"  3) Meta-analysis publication bias check\\n\",\n      \"  4) Additional output files\\n\",\n      \"  5) Version and citation details\\n\\n\",\n      sep=\"\", file=\"metaforGUI_Output.txt\")\n\n  cat(\"\\n********** 1) Function code used ***********\\n- metafor Function call:\\n    \", file=\"metaforGUI_Output.txt\", append=T)\n  capture.output(meta_analysis$call, file=\"metaforGUI_Output.txt\", append=T)  #Code used to run rma()\n  cat(\"- Effect Sizes (ES):\\n    arg_yi =\", arg_yi, file=\"metaforGUI_Output.txt\", append=T)\n  cat(\"\\n- ES Variances*:\\n    arg_vi =\", arg_vi, file=\"metaforGUI_Output.txt\", append=T)\n  cat(\"\\n- ES Standard Errors*:\\n    arg_sei =\", arg_sei, file=\"metaforGUI_Output.txt\", append=T)\n  cat(\"\\n- Meta-analysis estimation method:\\n    arg_method =\", arg_method, file=\"metaforGUI_Output.txt\", append=T)\n  cat(\"\\n\\n*(Only one of arg_vi or arg_sei should contain data.\\n\", file=\"metaforGUI_Output.txt\", append=T)\n\n  cat(\"\\n\\n********** 2) Meta-analysis results ***********\", file=\"metaforGUI_Output.txt\", append=T)\n  capture.output(summary(meta_analysis), file=\"metaforGUI_Output.txt\", append=T)  #Summary of results\n\n  cat(\"\\n********** 3) Meta-analysis publication bias check ***********\", file=\"metaforGUI_Output.txt\", append=T)\n  capture.output(regtest(meta_analysis), file=\"metaforGUI_Output.txt\", append=T)  #Regression Test for Funnel Plot Asymmetry\n\n  cat(\"\\n********** 4) Additional output files ***********\\n\", file=\"metaforGUI_Output.txt\", append=T)\n\n  if(svalue(outputForest)==T) {\n    pdf(\"metaforGUI_Forest.pdf\"); forest(meta_analysis); dev.off()\n    cat(\"- Forest plot PDF file generated (metaforGUI_Forest.pdf).\\n\", file=\"metaforGUI_Output.txt\", append=T) }\n\n  if(svalue(outputFunnel)==T) {\n    pdf(\"metaforGUI_Funnel.pdf\"); funnel(meta_analysis); dev.off()\n    cat(\"- Funnel plot PDF file generated (metaforGUI_Funnel.pdf).\\n\", file=\"metaforGUI_Output.txt\", append=T) }\n\n  if(svalue(outputMAobjData)==T) {\n    save(\"meta_analysis\", file=\"metaforGUI_MetaAnalysis.RData\")\n    cat(\"- Meta-analysis results data file generated (metaforGUI_MetaAnalysis.RData). Use load() function to load the data into R.\\n\", file=\"metaforGUI_Output.txt\", append=T) }\n\n  cat(\"\\n\\n********** 5) Version and citation details ***********\\nWhen using metaforGUI you should cite:\\n- \",\n      R.version.string, \":\\n\", sep=\"\", file=\"metaforGUI_Output.txt\", append=T)\n  capture.output(print(citation(), style=\"textVersion\"), file=\"metaforGUI_Output.txt\", append=T)\n\n  cat(\"\\n\", paste(\"- metafor package version\", packageVersion(\"metafor\")),\" (http://www.metafor-project.org/):\\n\", sep=\"\", file=\"metaforGUI_Output.txt\", append=T)\n  capture.output(print(citation(\"metafor\"), style=\"textVersion\"), file=\"metaforGUI_Output.txt\", append=T)\n\n  cat(\"\\n\", paste(\"- metaforGUI package version\", packageVersion(\"metaforGUI\")), \":\\n\", sep=\"\", file=\"metaforGUI_Output.txt\", append=T)\n  capture.output(print(citation(\"metaforGUI\"), style=\"textVersion\"), file=\"metaforGUI_Output.txt\", append=T)\n\n  cat(\"\\n\\n********** [metaforGUI] End of Output ***********\", file=\"metaforGUI_Output.txt\", append=T)\n\n\n  gmessage(paste(\"Meta-analysis appears to have run successfully!\\n\\nPlease find the output file(s) in the defined output directory:\\n\",getwd()), title=\"Meta-analysis successful\")\n  cat(\"\\n*metaforGUI* message:\\n    Meta-analysis appears to have run successfully!\\n    Please find the output file(s) in the defined output directory:\\n     \", getwd() ,\"\\n\\n\")\n\n  } #End-of-check if ES and Var variables are assigned-If_clause\n}) #End-of-btnRunMA_handler_function\n\n\n} #End-of-metaforGUI-function / EOF\n",
    "created" : 1482195784118.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "124856916",
    "id" : "74E42D05",
    "lastKnownWriteTime" : 1488012693,
    "last_content_update" : -2147483648,
    "path" : "~/GitHub/metaforGUI/R/metaforGUI.R",
    "project_path" : "R/metaforGUI.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}