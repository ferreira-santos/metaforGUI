{
    "collab_server" : "",
    "contents" : "#' metaforGUI: Graphical User Interface (GUI) for the R metafor Package\n#' @description\n#' Cross-platform GUI for the R metafor[1] package, based on gWidgets and RGtk2. Allows conducting a basic meta-analysis. Suitable for beginners not familiar with R, but does not allow using advanced features of metafor.\n#' @seealso\n#' \\code{\\link[metafor]{metafor-package}} for full details of the 'metafor' package.\n#' @examples\n#' # Simply run the main function to bring up the GUI.\n#' metaforGUI()\n#' # Loading data set, selecting variables and running analysis are run from the GUI.\n#' @references\n#' [1] Viechtbauer, W. (2010). Conducting meta-analyses in R with the metafor package. Journal of Statistical Software, 36(3), 1-48. URL: http://www.jstatsoft.org/v36/i03/\n#' @import gWidgets\n#' @import gWidgetsRGtk2\n#' @import metafor\n#' @export\nmetaforGUI <- function(){\n\n#Cool Guide: http://user2007.org/program/presentations/verzani-1.pdf\n# https://rdrr.io/rforge/gWidgets/\n\n# change icon: http://stackoverflow.com/questions/14764517/how-do-i-change-the-wm-icon-for-a-gwindow-using-gwidgets-in-r\n\n# First run:   install.packages(\"gWidgetsRGtk2\", dep=TRUE)\n\n# You can learn more about package authoring with RStudio at: http://r-pkgs.had.co.nz/\n#https://www.rstudio.com/wp-content/uploads/2015/03/devtools-cheatsheet.pdf\n\n#require(gWidgetsRGtk2)\n#require(metafor)\noptions(guiToolkit = \"RGtk2\")\n\n#Get Screen size (pixels)\nsw <- as.numeric(system(\"wmic desktopmonitor get screenwidth\" , intern=TRUE))[-c(1, length(as.numeric(system(\"wmic desktopmonitor get screenwidth\" , intern=TRUE))))][2]\nsh <- as.numeric(system(\"wmic desktopmonitor get screenheight\", intern=TRUE))[-c(1, length(as.numeric(system(\"wmic desktopmonitor get screenheight\", intern=TRUE))))][2]\n  #print(c(\"Screen Size:\",as.character(sw), as.character(sh)))\nstart_width <- sw/2\nstart_height <- sh/2\nrm(sh, sw)\n\nwin = gwindow(\"VisualMetafor (FFS)\", width=start_width, height=start_height)\nrm(start_width, start_height)\n#lay = glayout(container=win) # lay = layout organizer\ng <- gframe(\"Define:\", horizontal=F, container=win, expand=T)\ng_top <- ggroup(container=g)\n  glabel(\"  DataSet file:\", container=g_top)\n  editFile <- gedit(text=\"<no file>\", container=g_top)\n  gbutton(\"Load file\", container=g_top, handler=\n  function(h,...) {\n  # get locale\n  # load file according to locale (read.csv or read.csv2) using --> gfile()\n  })\n\n  gseparator(container=g)\n\ng_mid <- ggroup(container=g, expand=T)\n  g_mid_left <- ggroup(container=g_mid)\n    varbrowser <- gvarbrowser(container=g_mid_left)\n  g_mid_right <- ggroup(container=g_mid, horizontal=F)\n    addSpring(g_mid_right)\n\n    frameStudies <- gframe(\"Study names (optional):\", container=g_mid_right, expand=T)\n      glabel(\" \", container=frameStudies)\n      btnAddStudies <- gbutton(\">>\", container=frameStudies, handler=\n        function(h,...) {\n          if(svalue(varbrowser)==\"\") { gmessage(\"No variable selected from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n          else if(svalue(btnAddStudies)==\">>\") {\n            svalue(labelStudies) <- svalue(varbrowser)\n            svalue(btnAddStudies) <- \"<<\"}\n          else {\n            svalue(labelStudies) <- \"No variable selected\"\n            svalue(btnAddStudies) <- \">>\"}\n        })\n      labelStudies <- glabel(\"No variable selected\", container=frameStudies)\n      glabel(\"  \", container=frameStudies)\n    addSpring(g_mid_right)\n\n    frameES <- gframe(\"Effect Sizes (ES):\", container=g_mid_right, expand=T)\n      glabel(\" \", container=frameES)\n      btnAddES <- gbutton(\">>\", container=frameES, handler=\n        function(h,...) {\n          if(svalue(varbrowser)==\"\") { gmessage(\"No variable selected from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n          else if(svalue(btnAddES)==\">>\") {\n            svalue(labelES) <- svalue(varbrowser)\n            svalue(btnAddES) <- \"<<\"}\n          else {\n            svalue(labelES) <- \"No variable selected\"\n            svalue(btnAddES) <- \">>\"}\n        })\n      labelES <- glabel(\"No variable selected\", container=frameES)\n      glabel(\"  \", container=frameES)\n    addSpring(g_mid_right)\n\n    frameVar <- gframe(\"ES Variances:\", container=g_mid_right, expand=T)\n      glabel(\" \", container=frameVar)\n      btnAddVar <- gbutton(\">>\", container=frameVar, handler=\n        function(h,...) {\n          if(svalue(varbrowser)==\"\") { gmessage(\"No variable selected from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n          else if(svalue(btnAddVar)==\">>\") {\n            svalue(labelVar) <- svalue(varbrowser)\n            svalue(btnAddVar) <- \"<<\"}\n          else {\n            svalue(labelVar) <- \"No variable selected\"\n            svalue(btnAddVar) <- \">>\"}\n        })\n      labelVar <- glabel(\"No variable selected\", container=frameVar)\n      glabel(\"  \", container=frameVar)\n    addSpring(g_mid_right)\n\n    frameN <- gframe(\"Sample Size (N):\", container=g_mid_right, expand=T)\n      glabel(\" \", container=frameN)\n      btnAddN <- gbutton(\">>\", container=frameN, handler=\n        function(h,...) {\n          if(svalue(varbrowser)==\"\") { gmessage(\"No variable selected from the variable list. Please make a selection first.\\n\\nIf there are no variables available you probably need to load your data set file.\", title=\"Select variable first\") }\n          else if(svalue(btnAddN)==\">>\") {\n            svalue(labelN) <- svalue(varbrowser)\n            svalue(btnAddN) <- \"<<\"}\n          else {\n            svalue(labelN) <- \"No variable selected\"\n            svalue(btnAddN) <- \">>\"}\n        })\n      labelN <- glabel(\"No variable selected\", container=frameN)\n      glabel(\"  \", container=frameN)\n    addSpring(g_mid_right)\n\n  gseparator(container=g)\n\ng_bottom <- ggroup(container=g)\n  glabel(\"  Output dir (WD):\", container=g_bottom)\n  editWD <- gedit(getwd(), container=g_bottom)\n  gbutton(\"Change dir\", container=g_bottom, handler=\n    function(h,...) {\n      setwd(gfile(type=\"selectdir\"))\n      svalue(editWD) <- getwd()\n    })\ng2 <- ggroup(horizontal=F, container=win, expand=T)\ng2frame <- gframe(\"Define and Run:\", container=g2, horizontal=F, expand=T)\ngbutton(\"Options\", container=g2frame) #serves as header and clicking brings back defaults!\ngradio(items=c(\"Fixed Effects\",\"Random Effects\"), selected=2, container=g2frame)\ngbutton(\"Outputs\", container=g2frame) #serves as header and clicking brings back defaults!\ngcheckbox(\"Meta-Analysis Results\", checked=T, container=g2frame)\ngcheckbox(\"Plot Forest Plot\", checked=T, container=g2frame)\ngcheckbox(\"Plot Funnel Plot\", checked=T, container=g2frame)\ngcheckbox(\"Save Output as RData file\", checked=T, container=g2frame)\n  #  save(x, file=\"MA_output.RData\")\n\naddSpring(g2frame)\ngbutton(\"Run Meta-Analysis\", container=g2frame)\n  #check if svalue(btnAddStudy)==\"<<\" (or maybe create global vars for the main args to pass to rma?)\n  #check for all 4 vars\n  #if no outputs are selected give warning saying no output files will be written\n  #if files already exist, confirmation dialog asking if user wants to overwrite\n\n}\n#metaforGUI()\n\n\n",
    "created" : 1482195784118.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2601374217",
    "id" : "74E42D05",
    "lastKnownWriteTime" : 1482198151,
    "last_content_update" : -2147483648,
    "path" : "~/GitHub/metaforGUI/R/metaforGUI.R",
    "project_path" : "R/metaforGUI.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}