#} #End-of-metaforGUI-function / EOF
x<-load("metaforGUI_MetaAnalysis.RData")
x<-open("metaforGUI_MetaAnalysis.RData")
load("metaforGUI_MetaAnalysis.RData")
names(meta-analysis)
names(meta_analysis)
#' metaforGUI: Graphical User Interface (GUI) for the R metafor Package
#' @description
#' Cross-platform GUI for the R metafor[1] package, based on gWidgets and RGtk2. Allows conducting a basic meta-analysis. Suitable for beginners not familiar with R, but does not allow using advanced features of metafor.
#' @seealso
#' \code{\link[metafor]{metafor-package}} for full details of the 'metafor' package.
#' @examples
#' ## Simply run the main function to bring up the GUI.
#' metaforGUI()
#' ## Loading data set, selecting variables and running analysis are run from the GUI.
#' ## Please refer to addtional documentation for details.
#' @references
#' [1] Viechtbauer, W. (2010). Conducting meta-analyses in R with the metafor package. Journal of Statistical Software, 36(3), 1-48. URL: http://www.jstatsoft.org/v36/i03/
#' @import gWidgets
#' @import gWidgetsRGtk2
#' @import metafor
#' @import grDevices
#' @import utils
#' @export
#metaforGUI <- function(){
options(guiToolkit = "RGtk2")
#Get Screen size (pixels) and make window size half the screen
sw <- (system("wmic desktopmonitor get screenwidth" , intern=TRUE))[-c(1, length(system("wmic desktopmonitor get screenwidth" , intern=TRUE)))]#[2] #Removed "[2]" due to bug in DesktopPC
sh <- (system("wmic desktopmonitor get screenheight", intern=TRUE))[-c(1, length(system("wmic desktopmonitor get screenheight", intern=TRUE)))]#[2] #Removed "[2]" due to bug in DesktopPC
#print(c("Screen Size:",as.character(sw), as.character(sh)))
start_width <- as.numeric(sw)/2
start_height <- as.numeric(sh)/2
rm(sh, sw)
#Initialize main window
win = gwindow("metaforGUI (version-here; FFS)", width=start_width, height=start_height)
rm(start_width, start_height)
#lay = glayout(container=win) # lay = layout organizer
### LEFT PANEL (Load Dataset + Variables + Output Dir) ####
g <- gframe("Define:", horizontal=F, container=win, expand=T)
g_top <- ggroup(container=g)
glabel("  DataSet file:", container=g_top)
editFile <- gedit(text="<no file>", container=g_top)
gbutton("Load file", container=g_top, handler=
function(h,...) {
# Load file dialog
f <- choose.files(
caption="Select DataSet file in Comma-Separated Value (CSV) format",
multi = FALSE,
filters = matrix( c("CSV files (*.csv)","All files (*.*)","*.csv","*.*"), nrow=2, ncol=2),
index=1 )
# Choose read function according to locale (read.csv or read.csv2)
if(Sys.localeconv()["decimal_point"]=="." && length(f)>0) {
#use read.csv
assign("data", read.csv(f), envir=.GlobalEnv)
svalue(editFile) <- f
} else if(length(f)>0) {
#use read.csv2
assign("data", read.csv(f), envir=.GlobalEnv)
svalue(editFile) <- f
}
})#End-of-btnLoadFile-function
gseparator(container=g)
g_mid <- ggroup(container=g, expand=T)
g_mid_left <- ggroup(container=g_mid)
varbrowser <- gvarbrowser(container=g_mid_left)
g_mid_right <- ggroup(container=g_mid, horizontal=F)
addSpring(g_mid_right)
frameStudies <- gframe("Study names (optional):", container=g_mid_right, expand=T)
glabel(" ", container=frameStudies)
btnAddStudies <- gbutton(">>", container=frameStudies, handler=
function(h,...) {
if(svalue(varbrowser)=="") { gmessage("No variable selected from the variable list. Please make a selection first.\n\nIf there are no variables available you probably need to load your data set file.", title="Select variable first") }
else if(svalue(btnAddStudies)==">>") {
svalue(labelStudies) <- varbrowser[][length(varbrowser[])]
svalue(btnAddStudies) <- "<<"}
else {
svalue(labelStudies) <- "<No variable selected>"
svalue(btnAddStudies) <- ">>"}
})
labelStudies <- glabel("<No variable selected>", container=frameStudies)
glabel("  ", container=frameStudies)
addSpring(g_mid_right)
frameES <- gframe("Effect Sizes (ES):", container=g_mid_right, expand=T)
glabel(" ", container=frameES)
btnAddES <- gbutton(">>", container=frameES, handler=
function(h,...) {
if(svalue(varbrowser)=="") { gmessage("No variable selected from the variable list. Please make a selection first.\n\nIf there are no variables available you probably need to load your data set file.", title="Select variable first") }
else if(svalue(btnAddES)==">>") {
svalue(labelES) <- varbrowser[][length(varbrowser[])]    # If only one value is selected, that is the variable name to add; If two values are active: 1st is data.frame, 2nd is variable name, so the 2nd is the variable name to add
svalue(btnAddES) <- "<<"}
else {
svalue(labelES) <- "<No variable selected>"
svalue(btnAddES) <- ">>"}
})
labelES <- glabel("<No variable selected>", container=frameES)
glabel("  ", container=frameES)
addSpring(g_mid_right)
frameVar <- gframe("ES Variances/SE:", container=g_mid_right, expand=T)
glabel(" ", container=frameVar)
btnAddVar <- gbutton(">>", container=frameVar, handler=
function(h,...) {
if(svalue(varbrowser)=="") { gmessage("No variable selected from the variable list. Please make a selection first.\n\nIf there are no variables available you probably need to load your data set file.", title="Select variable first") }
else if(svalue(btnAddVar)==">>") {
svalue(labelVar) <- varbrowser[][length(varbrowser[])]
svalue(btnAddVar) <- "<<"}
else {
svalue(labelVar) <- "<No variable selected>"
svalue(btnAddVar) <- ">>"}
})
labelVar <- glabel("<No variable selected>", container=frameVar)
glabel("  ", container=frameVar)
radioVar <- gradio(items=c("Variances","Standard Errors (SE)"), container=frameVar)
glabel("  ", container=frameVar)
addSpring(g_mid_right)
#    frameN <- gframe("Sample Size (N):", container=g_mid_right, expand=T)
#      glabel(" ", container=frameN)
#      btnAddN <- gbutton(">>", container=frameN, handler=
#        function(h,...) {
#          if(svalue(varbrowser)=="") { gmessage("No variable selected from the variable list. Please make a selection first.\n\nIf there are no variables available you probably need to load your data set file.", title="Select variable first") }
#          else if(svalue(btnAddN)==">>") {
#            svalue(labelN) <- svalue(varbrowser)
#            svalue(btnAddN) <- "<<"}
#          else {
#            svalue(labelN) <- "No variable selected"
#            svalue(btnAddN) <- ">>"}
#        })
#      labelN <- glabel("No variable selected", container=frameN)
#      glabel("  ", container=frameN)
#    addSpring(g_mid_right)
gseparator(container=g)
g_bottom <- ggroup(container=g)
glabel("  Output Folder/Directory (WD):", container=g_bottom)
editWD <- gedit(getwd(), container=g_bottom)
gbutton("Change Folder", container=g_bottom, handler=
function(h,...) {
d <- choose.dir(default = getwd(), caption = "Select Output Folder")
if(!is.na(d)) { setwd(d) }
svalue(editWD) <- getwd()
})
#IDEA: Code to make a Open WD button?
#opendir <- function(dir = getwd()){
#  if (.Platform['OS.type'] == "windows"){
#    shell.exec(dir)
#  } else {
#    system(paste(Sys.getenv("R_BROWSER"), dir))
#  }
#}
#
#
# browseURL("C:")   # Works in Windows -- maybe also other OS's?
### RIGHT PANEL (Options, Outputs, Run Meta-Analysis): ####
g2 <- ggroup(horizontal=F, container=win, expand=T)
g2frame <- gframe("Define and Run:", container=g2, horizontal=F, expand=T)
## Options ####
gbutton("Options", container=g2frame) #ISSUE: IDEA: serves as header and clicking brings back defaults!
radioFixedRandom <- gradio(items=c("Fixed Effects","Random Effects"), selected=2, container=g2frame) #ISSUE: consider changing to dropbox with all possible methods
## Outputs ####
gbutton("Outputs", container=g2frame) #ISSUE: IDEA: serves as header and clicking brings back defaults!
outputMA <- gcheckbox("Meta-Analysis Results", checked=T, container=g2frame, handler=
function(h,...) {
if(svalue(outputMA)==F) {gmessage("The Meta-Analysis Results output cannot be disabled as metaforGUI will always produce an output text file (with extension .txt).\n\nThis option is only listed here as a reminder.\n\nNote: the output files will be overwritten everytime you run metaforGUI, so copy or move the files to save them.", "This option cannot be unchecked.")}
svalue(outputMA) <- T
})
outputForest <- gcheckbox("Forest Plot (PDF)", checked=T, container=g2frame)
outputFunnel <- gcheckbox("Funnel Plot (PDF)", checked=T, container=g2frame)
outputMAobjData <- gcheckbox("Save Output as RData file", checked=T, container=g2frame)
## Run Meta-Analysis ####
addSpring(g2frame)
gbutton("Run Meta-Analysis", container=g2frame, handler=
function(h,...) {
#ISSUE: IDEA: if files already exist, confirmation dialog asking if user wants to overwrite
## Check for btnAddES and btnAddVar to see if ES and Var variables are defined:
if(svalue(btnAddES)!="<<" || svalue(btnAddVar)!="<<"){
#ES and Var variables not assigned
gmessage("Meta-analysis did not run because Effect Sizes (ES) or ES Variances/SEs not defined. Please select the variables from the variable list.",title="Required variables not defined.",icon="error")
} else {
#ES and Var variables assigned -> Continue!
## Define rma arguments ##########################
if(svalue(btnAddStudies)=="<<") { arg_slab <- with(data,get(svalue(labelStudies))) }
arg_yi <- with(data,get(svalue(labelES)))
if(svalue(radioVar)=="Variances") {arg_vi<-with(data,get(svalue(labelVar)));arg_sei<-NULL} else {arg_vi<-NULL;arg_sei<-with(data,get(svalue(labelVar)))}
if(svalue(radioFixedRandom)=="Fixed Effects") {arg_method <- "FE"} else {arg_method <- "REML"}
## Run rma ##########################
if(svalue(btnAddStudies)=="<<") {
#Run WITH custom Study Names
meta_analysis <- rma(yi=arg_yi, vi=arg_vi, sei=arg_sei, method=arg_method, slab=arg_slab)
} else {
#Run WITHOUT custom Study Names
meta_analysis <- rma(yi=arg_yi, vi=arg_vi, sei=arg_sei, method=arg_method) }
## Save outputs ##########################
cat("********** [metaforGUI] Output ***********\n", "Output automatically generated by metaforGUI ",
as.character(packageVersion("metaforGUI")), " at ", as.character(Sys.time()),".\n\n",
"List of sections:\n",
"  1) Function code used\n",
"  2) Meta-analysis results\n",
"  3) Meta-analysis publication bias check\n",
"  4) Additional output files\n",
"  5) Version and citation details\n\n",
sep="", file="metaforGUI_Output.txt")
cat("\n********** 1) Function code used ***********\n- metafor Function call:\n    ", file="metaforGUI_Output.txt", append=T)
capture.output(meta_analysis$call, file="metaforGUI_Output.txt", append=T)  #Code used to run rma()
cat("- Effect Sizes (ES):\n    arg_yi =", arg_yi, file="metaforGUI_Output.txt", append=T)
cat("\n- ES Variances*:\n    arg_vi =", arg_vi, file="metaforGUI_Output.txt", append=T)
cat("\n- ES Standard Errors*:\n    arg_sei =", arg_sei, file="metaforGUI_Output.txt", append=T)
cat("\n- Meta-analysis estimation method:\n    arg_method =", arg_method, file="metaforGUI_Output.txt", append=T)
cat("\n\n*(Only one of arg_vi or arg_sei should contain data.)\n", file="metaforGUI_Output.txt", append=T)
cat("\n\n********** 2) Meta-analysis results ***********", file="metaforGUI_Output.txt", append=T)
capture.output(summary(meta_analysis), file="metaforGUI_Output.txt", append=T)  #Summary of results
cat("\n********** 3) Meta-analysis publication bias check ***********", file="metaforGUI_Output.txt", append=T)
capture.output(regtest(meta_analysis), file="metaforGUI_Output.txt", append=T)  #Regression Test for Funnel Plot Asymmetry
cat("\n********** 4) Additional output files ***********\n", file="metaforGUI_Output.txt", append=T)
if(svalue(outputForest)==T) {
pdf("metaforGUI_Forest.pdf"); forest(meta_analysis); dev.off()
cat("- Forest plot PDF file generated (metaforGUI_Forest.pdf).\n", file="metaforGUI_Output.txt", append=T) }
if(svalue(outputFunnel)==T) {
pdf("metaforGUI_Funnel.pdf"); funnel(meta_analysis); dev.off()
cat("- Funnel plot PDF file generated (metaforGUI_Funnel.pdf).\n", file="metaforGUI_Output.txt", append=T) }
if(svalue(outputMAobjData)==T) {
save("meta_analysis", file="metaforGUI_MetaAnalysis.RData")
cat("- Meta-analysis results data file generated (metaforGUI_MetaAnalysis.RData). Use load() function to load the results into R.\n", file="metaforGUI_Output.txt", append=T) }
cat("\n\n********** 5) Version and citation details ***********\nWhen using metaforGUI you should cite:\n\n- ",
R.version.string, ":\n", sep="", file="metaforGUI_Output.txt", append=T)
capture.output(print(citation(), style="textVersion"), file="metaforGUI_Output.txt", append=T)
cat("\n", paste("- metafor package version", packageVersion("metafor"))," (http://www.metafor-project.org/):\n", sep="", file="metaforGUI_Output.txt", append=T)
capture.output(print(citation("metafor"), style="textVersion"), file="metaforGUI_Output.txt", append=T)
cat("\n", paste("- metaforGUI package version", packageVersion("metaforGUI")), ":\n", sep="", file="metaforGUI_Output.txt", append=T)
capture.output(print(citation("metaforGUI"), style="textVersion"), file="metaforGUI_Output.txt", append=T)
cat("\n\n********** [metaforGUI] End of Output ***********", file="metaforGUI_Output.txt", append=T)
gmessage(paste("Meta-analysis appears to have run successfully!\n\nPlease find the output file(s) in the defined output directory:\n",getwd()), title="Meta-analysis successful")
cat("\n*metaforGUI* message:\n    Meta-analysis appears to have run successfully!\n    Please find the output file(s) in the defined output directory:\n     ", getwd() ,"\n\n")
} #End-of-check if ES and Var variables are assigned-If_clause
}) #End-of-btnRunMA_handler_function
#} #End-of-metaforGUI-function / EOF
d
data[d]
data["d"]
shell.exec("C:/Users/F. Ferreira-Santos/Desktop/metaforGUI_Output.txt")
shell.exec(paste0(getwd(),"metaforGUI_Output.txt"))
shell.exec(paste0(getwd(),"/metaforGUI_Output.txt"))
View(data)
ls(
)
library(metaforGUI)
metaforGUI()
getwd()
ls()
options(guiToolkit = "RGtk2")
#Get Screen size (pixels) and make window size half the screen
sw <- (system("wmic desktopmonitor get screenwidth" , intern=TRUE))[-c(1, length(system("wmic desktopmonitor get screenwidth" , intern=TRUE)))]#[2] #Removed "[2]" due to bug in DesktopPC
sh <- (system("wmic desktopmonitor get screenheight", intern=TRUE))[-c(1, length(system("wmic desktopmonitor get screenheight", intern=TRUE)))]#[2] #Removed "[2]" due to bug in DesktopPC
#print(c("Screen Size:",as.character(sw), as.character(sh)))
start_width <- as.numeric(sw)/2
start_height <- as.numeric(sh)/2
rm(sh, sw)
#Initialize main window
win = gwindow("metaforGUI (version-here; FFS)", width=start_width, height=start_height)
rm(start_width, start_height)
#lay = glayout(container=win) # lay = layout organizer
### LEFT PANEL (Load Dataset + Variables + Output Dir) ####
g <- gframe("Define:", horizontal=F, container=win, expand=T)
g_top <- ggroup(container=g)
glabel("  DataSet file:", container=g_top)
editFile <- gedit(text="<no file>", container=g_top)
gbutton("Load file", container=g_top, handler=
function(h,...) {
# Load file dialog
f <- choose.files(
caption="Select DataSet file in Comma-Separated Value (CSV) format",
multi = FALSE,
filters = matrix( c("CSV files (*.csv)","All files (*.*)","*.csv","*.*"), nrow=2, ncol=2),
index=1 )
# Choose read function according to locale (read.csv or read.csv2)
if(Sys.localeconv()["decimal_point"]=="." && length(f)>0) {
#use read.csv
assign("data", read.csv(f), envir=.GlobalEnv)
svalue(editFile) <- f
} else if(length(f)>0) {
#use read.csv2
assign("data", read.csv(f), envir=.GlobalEnv)
svalue(editFile) <- f
}
})#End-of-btnLoadFile-function
gseparator(container=g)
g_mid <- ggroup(container=g, expand=T)
g_mid_left <- ggroup(container=g_mid)
varbrowser <- gvarbrowser(container=g_mid_left)
g_mid_right <- ggroup(container=g_mid, horizontal=F)
addSpring(g_mid_right)
frameStudies <- gframe("Study names (optional):", container=g_mid_right, expand=T)
glabel(" ", container=frameStudies)
btnAddStudies <- gbutton(">>", container=frameStudies, handler=
function(h,...) {
if(svalue(varbrowser)=="") { gmessage("No variable selected from the variable list. Please make a selection first.\n\nIf there are no variables available you probably need to load your data set file.", title="Select variable first") }
else if(svalue(btnAddStudies)==">>") {
svalue(labelStudies) <- varbrowser[][length(varbrowser[])]
svalue(btnAddStudies) <- "<<"}
else {
svalue(labelStudies) <- "<No variable selected>"
svalue(btnAddStudies) <- ">>"}
})
labelStudies <- glabel("<No variable selected>", container=frameStudies)
glabel("  ", container=frameStudies)
addSpring(g_mid_right)
frameES <- gframe("Effect Sizes (ES):", container=g_mid_right, expand=T)
glabel(" ", container=frameES)
btnAddES <- gbutton(">>", container=frameES, handler=
function(h,...) {
if(svalue(varbrowser)=="") { gmessage("No variable selected from the variable list. Please make a selection first.\n\nIf there are no variables available you probably need to load your data set file.", title="Select variable first") }
else if(svalue(btnAddES)==">>") {
svalue(labelES) <- varbrowser[][length(varbrowser[])]    # If only one value is selected, that is the variable name to add; If two values are active: 1st is data.frame, 2nd is variable name, so the 2nd is the variable name to add
svalue(btnAddES) <- "<<"}
else {
svalue(labelES) <- "<No variable selected>"
svalue(btnAddES) <- ">>"}
})
labelES <- glabel("<No variable selected>", container=frameES)
glabel("  ", container=frameES)
addSpring(g_mid_right)
frameVar <- gframe("ES Variances/SE:", container=g_mid_right, expand=T)
glabel(" ", container=frameVar)
btnAddVar <- gbutton(">>", container=frameVar, handler=
function(h,...) {
if(svalue(varbrowser)=="") { gmessage("No variable selected from the variable list. Please make a selection first.\n\nIf there are no variables available you probably need to load your data set file.", title="Select variable first") }
else if(svalue(btnAddVar)==">>") {
svalue(labelVar) <- varbrowser[][length(varbrowser[])]
svalue(btnAddVar) <- "<<"}
else {
svalue(labelVar) <- "<No variable selected>"
svalue(btnAddVar) <- ">>"}
})
labelVar <- glabel("<No variable selected>", container=frameVar)
glabel("  ", container=frameVar)
radioVar <- gradio(items=c("Variances","Standard Errors (SE)"), container=frameVar)
glabel("  ", container=frameVar)
addSpring(g_mid_right)
#    frameN <- gframe("Sample Size (N):", container=g_mid_right, expand=T)
#      glabel(" ", container=frameN)
#      btnAddN <- gbutton(">>", container=frameN, handler=
#        function(h,...) {
#          if(svalue(varbrowser)=="") { gmessage("No variable selected from the variable list. Please make a selection first.\n\nIf there are no variables available you probably need to load your data set file.", title="Select variable first") }
#          else if(svalue(btnAddN)==">>") {
#            svalue(labelN) <- svalue(varbrowser)
#            svalue(btnAddN) <- "<<"}
#          else {
#            svalue(labelN) <- "No variable selected"
#            svalue(btnAddN) <- ">>"}
#        })
#      labelN <- glabel("No variable selected", container=frameN)
#      glabel("  ", container=frameN)
#    addSpring(g_mid_right)
gseparator(container=g)
g_bottom <- ggroup(container=g)
glabel("  Output Folder/Directory (WD):", container=g_bottom)
editWD <- gedit(getwd(), container=g_bottom)
gbutton("Change Folder", container=g_bottom, handler=
function(h,...) {
d <- choose.dir(default = getwd(), caption = "Select Output Folder")
if(!is.na(d)) { setwd(d) }
svalue(editWD) <- getwd()
})
#IDEA: Code to make a Open WD button?
#opendir <- function(dir = getwd()){
#  if (.Platform['OS.type'] == "windows"){
#    shell.exec(dir)
#  } else {
#    system(paste(Sys.getenv("R_BROWSER"), dir))
#  }
#}
#
#
# browseURL("C:")   # Works in Windows -- maybe also other OS's?
### RIGHT PANEL (Options, Outputs, Run Meta-Analysis): ####
g2 <- ggroup(horizontal=F, container=win, expand=T)
g2frame <- gframe("Define and Run:", container=g2, horizontal=F, expand=T)
## Options ####
gbutton("Options", container=g2frame) #ISSUE: IDEA: serves as header and clicking brings back defaults!
radioFixedRandom <- gradio(items=c("Fixed Effects","Random Effects"), selected=2, container=g2frame) #ISSUE: consider changing to dropbox with all possible methods
## Outputs ####
gbutton("Outputs", container=g2frame) #ISSUE: IDEA: serves as header and clicking brings back defaults!
outputMA <- gcheckbox("Meta-Analysis Results", checked=T, container=g2frame, handler=
function(h,...) {
if(svalue(outputMA)==F) {gmessage("The Meta-Analysis Results output cannot be disabled as metaforGUI will always produce an output text file (with extension .txt).\n\nThis option is only listed here as a reminder.\n\nNote: the output files will be overwritten everytime you run metaforGUI, so copy or move the files to save them.", "This option cannot be unchecked.")}
svalue(outputMA) <- T
})
outputForest <- gcheckbox("Forest Plot (PDF)", checked=T, container=g2frame)
outputFunnel <- gcheckbox("Funnel Plot (PDF)", checked=T, container=g2frame)
outputMAobjData <- gcheckbox("Save Output as RData file", checked=T, container=g2frame)
## Run Meta-Analysis ####
addSpring(g2frame)
gbutton("Run Meta-Analysis", container=g2frame, handler=
function(h,...) {
#ISSUE: IDEA: if files already exist, confirmation dialog asking if user wants to overwrite
## Check for btnAddES and btnAddVar to see if ES and Var variables are defined:
if(svalue(btnAddES)!="<<" || svalue(btnAddVar)!="<<"){
#ES and Var variables not assigned
gmessage("Meta-analysis did not run because Effect Sizes (ES) or ES Variances/SEs not defined. Please select the variables from the variable list.",title="Required variables not defined.",icon="error")
} else {
#ES and Var variables assigned -> Continue!
## Define rma arguments ##########################
if(svalue(btnAddStudies)=="<<") { arg_slab <- with(data,get(svalue(labelStudies))) }
arg_yi <- with(data,get(svalue(labelES)))
if(svalue(radioVar)=="Variances") {arg_vi<-with(data,get(svalue(labelVar)));arg_sei<-NULL} else {arg_vi<-NULL;arg_sei<-with(data,get(svalue(labelVar)))}
if(svalue(radioFixedRandom)=="Fixed Effects") {arg_method <- "FE"} else {arg_method <- "REML"}
## Run rma ##########################
if(svalue(btnAddStudies)=="<<") {
#Run WITH custom Study Names
meta_analysis <- rma(yi=arg_yi, vi=arg_vi, sei=arg_sei, method=arg_method, slab=arg_slab)
} else {
#Run WITHOUT custom Study Names
meta_analysis <- rma(yi=arg_yi, vi=arg_vi, sei=arg_sei, method=arg_method) }
## Save outputs ##########################
cat("********** [metaforGUI] Output ***********\n", "Output automatically generated by metaforGUI ",
as.character(packageVersion("metaforGUI")), " at ", as.character(Sys.time()),".\n\n",
"List of sections:\n",
"  1) Function code used\n",
"  2) Meta-analysis results\n",
"  3) Meta-analysis publication bias check\n",
"  4) Additional output files\n",
"  5) Version and citation details\n\n",
sep="", file="metaforGUI_Output.txt")
cat("\n********** 1) Function code used ***********\n- metafor Function call:\n    ", file="metaforGUI_Output.txt", append=T)
capture.output(meta_analysis$call, file="metaforGUI_Output.txt", append=T)  #Code used to run rma()
cat("- Effect Sizes (ES):\n    arg_yi =", arg_yi, file="metaforGUI_Output.txt", append=T)
cat("\n- ES Variances*:\n    arg_vi =", arg_vi, file="metaforGUI_Output.txt", append=T)
cat("\n- ES Standard Errors*:\n    arg_sei =", arg_sei, file="metaforGUI_Output.txt", append=T)
cat("\n- Meta-analysis estimation method:\n    arg_method =", arg_method, file="metaforGUI_Output.txt", append=T)
cat("\n\n*(Only one of arg_vi or arg_sei should contain data.)\n", file="metaforGUI_Output.txt", append=T)
cat("\n\n********** 2) Meta-analysis results ***********", file="metaforGUI_Output.txt", append=T)
capture.output(summary(meta_analysis), file="metaforGUI_Output.txt", append=T)  #Summary of results
cat("\n********** 3) Meta-analysis publication bias check ***********", file="metaforGUI_Output.txt", append=T)
capture.output(regtest(meta_analysis), file="metaforGUI_Output.txt", append=T)  #Regression Test for Funnel Plot Asymmetry
cat("\n********** 4) Additional output files ***********\n", file="metaforGUI_Output.txt", append=T)
if(svalue(outputForest)==T) {
pdf("metaforGUI_Forest.pdf"); forest(meta_analysis); dev.off()
cat("- Forest plot PDF file generated (metaforGUI_Forest.pdf).\n", file="metaforGUI_Output.txt", append=T) }
if(svalue(outputFunnel)==T) {
pdf("metaforGUI_Funnel.pdf"); funnel(meta_analysis); dev.off()
cat("- Funnel plot PDF file generated (metaforGUI_Funnel.pdf).\n", file="metaforGUI_Output.txt", append=T) }
if(svalue(outputMAobjData)==T) {
save("meta_analysis", file="metaforGUI_MetaAnalysis.RData")
cat("- Meta-analysis results data file generated (metaforGUI_MetaAnalysis.RData). Use load() function to load the results into R.\n", file="metaforGUI_Output.txt", append=T) }
cat("\n\n********** 5) Version and citation details ***********\nWhen using metaforGUI you should cite:\n\n- ",
R.version.string, ":\n", sep="", file="metaforGUI_Output.txt", append=T)
capture.output(print(citation(), style="textVersion"), file="metaforGUI_Output.txt", append=T)
cat("\n", paste("- metafor package version", packageVersion("metafor"))," (http://www.metafor-project.org/):\n", sep="", file="metaforGUI_Output.txt", append=T)
capture.output(print(citation("metafor"), style="textVersion"), file="metaforGUI_Output.txt", append=T)
cat("\n", paste("- metaforGUI package version", packageVersion("metaforGUI")), ":\n", sep="", file="metaforGUI_Output.txt", append=T)
capture.output(print(citation("metaforGUI"), style="textVersion"), file="metaforGUI_Output.txt", append=T)
cat("\n\n********** [metaforGUI] End of Output ***********", file="metaforGUI_Output.txt", append=T)
gmessage(paste("Meta-analysis appears to have run successfully!\n\nPlease find the output file(s) in the defined output directory:\n",getwd()), title="Meta-analysis successful")
cat("\n*metaforGUI* message:\n    Meta-analysis appears to have run successfully!\n    Please find the output file(s) in the defined output directory:\n     ", getwd() ,"\n\n")
#IDEA: Run the output file on Windows - code below:
#shell.exec(paste0(getwd(),"/metaforGUI_Output.txt"))
#Maybe in the dialog box, as user "Open output file? Yes/No"
} #End-of-check if ES and Var variables are assigned-If_clause
}) #End-of-btnRunMA_handler_function
dev.off()
?with
metaforGUI()
library(metaforGUI)
metaforGUI()
library(metaforGUI)
metaforGUI()
library(metaforGUI)
metaforGUI()
library(metaforGUI)
metaforGUI()
library(metaforGUI)
metaforGUI()
?.GlobalEnv
library(metaforGUI)
metaforGUI()
get("study")
with(data,get("study"))
within(data,get("study"))
library(metaforGUI)
metaforGUI()
eval("data")
data
eval(data)
eval(data$study)
library(metaforGUI)
metaforGUI()
data
library(metaforGUI)
metaforGUI()
data
dataset
library(metaforGUI)
metaforGUI()
dataset<-data
rm(data)
print(dataset)
dataset
dataset["d"]
print(dataset["d"])
dataset$d
library(metaforGUI)
metaforGUI()
print(dataset$d)
print( with(data=data,get(svalue(labelStudies))) )
library(metaforGUI)
metaforGUI()
library(metaforGUI)
metaforGUI()
library(metaforGUI)
metaforGUI()
library(metaforGUI)
metaforGUI()
install.packages(devtools)
install.packages("devtools")
library(RGtk2)
